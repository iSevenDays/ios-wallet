// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct ManageContractResponse
//  {
//      union switch (ManageContractAction action)
//      {
//      case CONFIRM_COMPLETED:
//          bool isCompleted;
//      default:
//          void;
//      }
//      data;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct ManageContractResponse: XDREncodable {
  public var data: ManageContractResponseData
  public var ext: ManageContractResponseExt

  public init(
      data: ManageContractResponseData,
      ext: ManageContractResponseExt) {

    self.data = data
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.data.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public enum ManageContractResponseData: XDRDiscriminatedUnion {
    case confirmCompleted(Bool)

    public var discriminant: Int32 {
      switch self {
      case .confirmCompleted: return ManageContractAction.confirmCompleted.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .confirmCompleted(let data): xdr.append(data.toXDR())
      }

      return xdr
    }

  }
  public enum ManageContractResponseExt: XDRDiscriminatedUnion {
    case emptyVersion()

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion(): xdr.append(Data())
      }

      return xdr
    }

  }
}
