// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct StatisticsV2Entry
//  {
//      uint64      id;
//  	AccountID   accountID;
//  	StatsOpType statsOpType;
//      AssetCode   assetCode;
//      bool        isConvertNeeded;
//  
//  	uint64 dailyOutcome;
//  	uint64 weeklyOutcome;
//  	uint64 monthlyOutcome;
//  	uint64 annualOutcome;
//  
//  	int64 updatedAt;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct StatisticsV2Entry: XDREncodable {
  public var id: Uint64
  public var accountID: AccountID
  public var statsOpType: StatsOpType
  public var assetCode: AssetCode
  public var isConvertNeeded: Bool
  public var dailyOutcome: Uint64
  public var weeklyOutcome: Uint64
  public var monthlyOutcome: Uint64
  public var annualOutcome: Uint64
  public var updatedAt: Int64
  public var ext: StatisticsV2EntryExt

  public init(
      id: Uint64,
      accountID: AccountID,
      statsOpType: StatsOpType,
      assetCode: AssetCode,
      isConvertNeeded: Bool,
      dailyOutcome: Uint64,
      weeklyOutcome: Uint64,
      monthlyOutcome: Uint64,
      annualOutcome: Uint64,
      updatedAt: Int64,
      ext: StatisticsV2EntryExt) {

    self.id = id
    self.accountID = accountID
    self.statsOpType = statsOpType
    self.assetCode = assetCode
    self.isConvertNeeded = isConvertNeeded
    self.dailyOutcome = dailyOutcome
    self.weeklyOutcome = weeklyOutcome
    self.monthlyOutcome = monthlyOutcome
    self.annualOutcome = annualOutcome
    self.updatedAt = updatedAt
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.id.toXDR())
    xdr.append(self.accountID.toXDR())
    xdr.append(self.statsOpType.toXDR())
    xdr.append(self.assetCode.toXDR())
    xdr.append(self.isConvertNeeded.toXDR())
    xdr.append(self.dailyOutcome.toXDR())
    xdr.append(self.weeklyOutcome.toXDR())
    xdr.append(self.monthlyOutcome.toXDR())
    xdr.append(self.annualOutcome.toXDR())
    xdr.append(self.updatedAt.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public enum StatisticsV2EntryExt: XDRDiscriminatedUnion {
    case emptyVersion()

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion(): xdr.append(Data())
      }

      return xdr
    }

  }
}
