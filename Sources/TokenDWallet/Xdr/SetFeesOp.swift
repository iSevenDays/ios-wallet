// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct SetFeesOp
//      {
//          //: Fee entry to set
//          FeeEntry* fee;
//          //: `isDelete` indicates that fee should be either set or removed
//          bool isDelete;
//          //: reserved for future use
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      };

//  ===========================================================================
public struct SetFeesOp: XDREncodable {
  public var fee: FeeEntry?
  public var isDelete: Bool
  public var ext: SetFeesOpExt

  public init(
      fee: FeeEntry?,
      isDelete: Bool,
      ext: SetFeesOpExt) {

    self.fee = fee
    self.isDelete = isDelete
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.fee.toXDR())
    xdr.append(self.isDelete.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public enum SetFeesOpExt: XDRDiscriminatedUnion {
    case emptyVersion()

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion(): xdr.append(Data())
      }

      return xdr
    }

  }
}
