// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct CreateExternalSystemAccountIdPoolEntryActionInput
//  {
//      //: Type of external system, selected arbitrarily
//      int32 externalSystemType;
//      //: Data for external system binding
//      longstring data;
//      //: External system ID of creator
//      uint64 parent;
//  
//      //: Reserved for the future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct CreateExternalSystemAccountIdPoolEntryActionInput: XDREncodable {
  public var externalSystemType: Int32
  public var data: Longstring
  public var parent: Uint64
  public var ext: CreateExternalSystemAccountIdPoolEntryActionInputExt

  public init(
      externalSystemType: Int32,
      data: Longstring,
      parent: Uint64,
      ext: CreateExternalSystemAccountIdPoolEntryActionInputExt) {

    self.externalSystemType = externalSystemType
    self.data = data
    self.parent = parent
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.externalSystemType.toXDR())
    xdr.append(self.data.toXDR())
    xdr.append(self.parent.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public enum CreateExternalSystemAccountIdPoolEntryActionInputExt: XDRDiscriminatedUnion {
    case emptyVersion()

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion(): xdr.append(Data())
      }

      return xdr
    }

  }
}
