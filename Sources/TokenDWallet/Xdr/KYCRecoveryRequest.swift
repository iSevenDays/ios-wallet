// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  //: KYCRecoveryRequest is used to change signers of target account
//  struct KYCRecoveryRequest {
//      //: Account to be recovered
//      AccountID targetAccount;
//      //: New signers for the target account
//      UpdateSignerData signersData<>;
//  
//      //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details set by requester
//      //: Sequence number increases when request is rejected
//      uint32 sequenceNumber;
//  
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct KYCRecoveryRequest: XDREncodable {
  public var targetAccount: AccountID
  public var signersData: [UpdateSignerData]
  public var creatorDetails: Longstring
  public var sequenceNumber: Uint32
  public var ext: KYCRecoveryRequestExt

  public init(
      targetAccount: AccountID,
      signersData: [UpdateSignerData],
      creatorDetails: Longstring,
      sequenceNumber: Uint32,
      ext: KYCRecoveryRequestExt) {

    self.targetAccount = targetAccount
    self.signersData = signersData
    self.creatorDetails = creatorDetails
    self.sequenceNumber = sequenceNumber
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.targetAccount.toXDR())
    xdr.append(self.signersData.toXDR())
    xdr.append(self.creatorDetails.toXDR())
    xdr.append(self.sequenceNumber.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public enum KYCRecoveryRequestExt: XDRDiscriminatedUnion {
    case emptyVersion()

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion(): xdr.append(Data())
      }

      return xdr
    }

  }
}
