// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct TransactionHistoryResultEntry
//  {
//      uint32 ledgerSeq;
//      TransactionResultSet txResultSet;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct TransactionHistoryResultEntry: XDREncodable {
  public var ledgerSeq: Uint32
  public var txResultSet: TransactionResultSet
  public var ext: TransactionHistoryResultEntryExt

  public init(
      ledgerSeq: Uint32,
      txResultSet: TransactionResultSet,
      ext: TransactionHistoryResultEntryExt) {

    self.ledgerSeq = ledgerSeq
    self.txResultSet = txResultSet
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.ledgerSeq.toXDR())
    xdr.append(self.txResultSet.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public enum TransactionHistoryResultEntryExt: XDRDiscriminatedUnion {
    case emptyVersion

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion: xdr.append(Data())
      }

      return xdr
    }

  }
}
