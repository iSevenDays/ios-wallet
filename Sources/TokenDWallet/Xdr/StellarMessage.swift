// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  union StellarMessage switch (MessageType type)
//  {
//  case ERROR_MSG:
//      Error error;
//  case HELLO:
//      Hello hello;
//  case AUTH:
//      Auth auth;
//  case DONT_HAVE:
//      DontHave dontHave;
//  case GET_PEERS:
//      void;
//  case PEERS:
//      PeerAddress peers<>;
//  
//  case GET_TX_SET:
//      uint256 txSetHash;
//  case TX_SET:
//      TransactionSet txSet;
//  
//  case TRANSACTION:
//      TransactionEnvelope transaction;
//  
//  // SCP
//  case GET_SCP_QUORUMSET:
//      uint256 qSetHash;
//  case SCP_QUORUMSET:
//      SCPQuorumSet qSet;
//  case SCP_MESSAGE:
//      SCPEnvelope envelope;
//  case GET_SCP_STATE:
//      uint32 getSCPLedgerSeq; // ledger seq requested ; if 0, requests the latest
//  };

//  ===========================================================================
public enum StellarMessage: XDRDiscriminatedUnion {
  case errorMsg(Error)
  case hello(Hello)
  case auth(Auth)
  case dontHave(DontHave)
  case getPeers()
  case peers([PeerAddress])
  case getTxSet(Uint256)
  case txSet(TransactionSet)
  case transaction(TransactionEnvelope)
  case getScpQuorumset(Uint256)
  case scpQuorumset(SCPQuorumSet)
  case scpMessage(SCPEnvelope)
  case getScpState(Uint32)

  public var discriminant: Int32 {
    switch self {
    case .errorMsg: return MessageType.errorMsg.rawValue
    case .hello: return MessageType.hello.rawValue
    case .auth: return MessageType.auth.rawValue
    case .dontHave: return MessageType.dontHave.rawValue
    case .getPeers: return MessageType.getPeers.rawValue
    case .peers: return MessageType.peers.rawValue
    case .getTxSet: return MessageType.getTxSet.rawValue
    case .txSet: return MessageType.txSet.rawValue
    case .transaction: return MessageType.transaction.rawValue
    case .getScpQuorumset: return MessageType.getScpQuorumset.rawValue
    case .scpQuorumset: return MessageType.scpQuorumset.rawValue
    case .scpMessage: return MessageType.scpMessage.rawValue
    case .getScpState: return MessageType.getScpState.rawValue
    }
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.discriminant.toXDR())

    switch self {
    case .errorMsg(let data): xdr.append(data.toXDR())
    case .hello(let data): xdr.append(data.toXDR())
    case .auth(let data): xdr.append(data.toXDR())
    case .dontHave(let data): xdr.append(data.toXDR())
    case .getPeers(): xdr.append(Data())
    case .peers(let data): xdr.append(data.toXDR())
    case .getTxSet(let data): xdr.append(data.toXDR())
    case .txSet(let data): xdr.append(data.toXDR())
    case .transaction(let data): xdr.append(data.toXDR())
    case .getScpQuorumset(let data): xdr.append(data.toXDR())
    case .scpQuorumset(let data): xdr.append(data.toXDR())
    case .scpMessage(let data): xdr.append(data.toXDR())
    case .getScpState(let data): xdr.append(data.toXDR())
    }

    return xdr
  }
}
