// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct ASwapExtended
//  {
//      //: ID of the bid to apply atomic swap to
//      uint64 bidID;
//      //: AccountID of the bid owner
//      AccountID bidOwnerID;
//      //: Account id of the atomic swap source
//      AccountID purchaserID;
//      //: Base asset for the atomic swap
//      AssetCode baseAsset;
//      //: Quote asset for the atomic swap
//      AssetCode quoteAsset;
//      //: Amount in base asset to exchange
//      uint64 baseAmount;
//      //: Amount in quote asset to exchange
//      uint64 quoteAmount;
//      //: Price of base asset in terms of quote
//      uint64 price;
//      //: Balance in base asset of bid owner
//      BalanceID bidOwnerBaseBalanceID;
//      //: Balance in quote asset of atomic swap source
//      BalanceID purchaserBaseBalanceID;
//  
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//              void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct ASwapExtended: XDREncodable {
  public var bidID: Uint64
  public var bidOwnerID: AccountID
  public var purchaserID: AccountID
  public var baseAsset: AssetCode
  public var quoteAsset: AssetCode
  public var baseAmount: Uint64
  public var quoteAmount: Uint64
  public var price: Uint64
  public var bidOwnerBaseBalanceID: BalanceID
  public var purchaserBaseBalanceID: BalanceID
  public var ext: ASwapExtendedExt

  public init(
      bidID: Uint64,
      bidOwnerID: AccountID,
      purchaserID: AccountID,
      baseAsset: AssetCode,
      quoteAsset: AssetCode,
      baseAmount: Uint64,
      quoteAmount: Uint64,
      price: Uint64,
      bidOwnerBaseBalanceID: BalanceID,
      purchaserBaseBalanceID: BalanceID,
      ext: ASwapExtendedExt) {

    self.bidID = bidID
    self.bidOwnerID = bidOwnerID
    self.purchaserID = purchaserID
    self.baseAsset = baseAsset
    self.quoteAsset = quoteAsset
    self.baseAmount = baseAmount
    self.quoteAmount = quoteAmount
    self.price = price
    self.bidOwnerBaseBalanceID = bidOwnerBaseBalanceID
    self.purchaserBaseBalanceID = purchaserBaseBalanceID
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.bidID.toXDR())
    xdr.append(self.bidOwnerID.toXDR())
    xdr.append(self.purchaserID.toXDR())
    xdr.append(self.baseAsset.toXDR())
    xdr.append(self.quoteAsset.toXDR())
    xdr.append(self.baseAmount.toXDR())
    xdr.append(self.quoteAmount.toXDR())
    xdr.append(self.price.toXDR())
    xdr.append(self.bidOwnerBaseBalanceID.toXDR())
    xdr.append(self.purchaserBaseBalanceID.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public enum ASwapExtendedExt: XDRDiscriminatedUnion {
    case emptyVersion

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion: xdr.append(Data())
      }

      return xdr
    }

  }
}
