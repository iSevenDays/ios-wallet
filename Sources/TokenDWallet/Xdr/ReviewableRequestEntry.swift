// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct ReviewableRequestEntry {
//  	uint64 requestID;
//  	Hash hash; // hash of the request body
//  	AccountID requestor;
//  	longstring rejectReason;
//  	AccountID reviewer;
//  	string64* reference; // reference for request which will act as an unique key for the request (will reject request with the same reference from same requestor)
//  	int64 createdAt; // when request was created
//  
//  	union switch (ReviewableRequestType type) {
//  		case CREATE_ASSET:
//  			AssetCreationRequest assetCreationRequest;
//  		case UPDATE_ASSET:
//  			AssetUpdateRequest assetUpdateRequest;
//  		case CREATE_PRE_ISSUANCE:
//  			PreIssuanceRequest preIssuanceRequest;
//  		case CREATE_ISSUANCE:
//  			IssuanceRequest issuanceRequest;
//  		case CREATE_WITHDRAW:
//  			WithdrawalRequest withdrawalRequest;
//  		case CREATE_SALE:
//  			SaleCreationRequest saleCreationRequest;
//          case UPDATE_LIMITS:
//              LimitsUpdateRequest limitsUpdateRequest;
//          case CREATE_AML_ALERT:
//              AMLAlertRequest amlAlertRequest;
//          case CHANGE_ROLE:
//              ChangeRoleRequest changeRoleRequest;
//          case UPDATE_SALE_DETAILS:
//              UpdateSaleDetailsRequest updateSaleDetailsRequest;
//          case CREATE_INVOICE:
//              InvoiceRequest invoiceRequest;
//          case MANAGE_CONTRACT:
//              ContractRequest contractRequest;
//          case CREATE_ATOMIC_SWAP_ASK:
//              CreateAtomicSwapAskRequest createAtomicSwapAskRequest;
//          case CREATE_ATOMIC_SWAP_BID:
//              CreateAtomicSwapBidRequest createAtomicSwapBidRequest;
//          case CREATE_POLL:
//              CreatePollRequest createPollRequest;
//          case KYC_RECOVERY:
//              KYCRecoveryRequest kycRecoveryRequest;
//  	} body;
//  
//  	TasksExt tasks;
//  
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//  	}
//      ext;
//  };

//  ===========================================================================
public struct ReviewableRequestEntry: XDREncodable {
  public var requestID: Uint64
  public var hash: Hash
  public var requestor: AccountID
  public var rejectReason: Longstring
  public var reviewer: AccountID
  public var reference: String64?
  public var createdAt: Int64
  public var body: ReviewableRequestEntryBody
  public var tasks: TasksExt
  public var ext: ReviewableRequestEntryExt

  public init(
      requestID: Uint64,
      hash: Hash,
      requestor: AccountID,
      rejectReason: Longstring,
      reviewer: AccountID,
      reference: String64?,
      createdAt: Int64,
      body: ReviewableRequestEntryBody,
      tasks: TasksExt,
      ext: ReviewableRequestEntryExt) {

    self.requestID = requestID
    self.hash = hash
    self.requestor = requestor
    self.rejectReason = rejectReason
    self.reviewer = reviewer
    self.reference = reference
    self.createdAt = createdAt
    self.body = body
    self.tasks = tasks
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.requestID.toXDR())
    xdr.append(self.hash.toXDR())
    xdr.append(self.requestor.toXDR())
    xdr.append(self.rejectReason.toXDR())
    xdr.append(self.reviewer.toXDR())
    xdr.append(self.reference.toXDR())
    xdr.append(self.createdAt.toXDR())
    xdr.append(self.body.toXDR())
    xdr.append(self.tasks.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public enum ReviewableRequestEntryBody: XDRDiscriminatedUnion {
    case createAsset(AssetCreationRequest)
    case updateAsset(AssetUpdateRequest)
    case createPreIssuance(PreIssuanceRequest)
    case createIssuance(IssuanceRequest)
    case createWithdraw(WithdrawalRequest)
    case createSale(SaleCreationRequest)
    case updateLimits(LimitsUpdateRequest)
    case createAmlAlert(AMLAlertRequest)
    case changeRole(ChangeRoleRequest)
    case updateSaleDetails(UpdateSaleDetailsRequest)
    case createInvoice(InvoiceRequest)
    case manageContract(ContractRequest)
    case createAtomicSwapAsk(CreateAtomicSwapAskRequest)
    case createAtomicSwapBid(CreateAtomicSwapBidRequest)
    case createPoll(CreatePollRequest)
    case kycRecovery(KYCRecoveryRequest)

    public var discriminant: Int32 {
      switch self {
      case .createAsset: return ReviewableRequestType.createAsset.rawValue
      case .updateAsset: return ReviewableRequestType.updateAsset.rawValue
      case .createPreIssuance: return ReviewableRequestType.createPreIssuance.rawValue
      case .createIssuance: return ReviewableRequestType.createIssuance.rawValue
      case .createWithdraw: return ReviewableRequestType.createWithdraw.rawValue
      case .createSale: return ReviewableRequestType.createSale.rawValue
      case .updateLimits: return ReviewableRequestType.updateLimits.rawValue
      case .createAmlAlert: return ReviewableRequestType.createAmlAlert.rawValue
      case .changeRole: return ReviewableRequestType.changeRole.rawValue
      case .updateSaleDetails: return ReviewableRequestType.updateSaleDetails.rawValue
      case .createInvoice: return ReviewableRequestType.createInvoice.rawValue
      case .manageContract: return ReviewableRequestType.manageContract.rawValue
      case .createAtomicSwapAsk: return ReviewableRequestType.createAtomicSwapAsk.rawValue
      case .createAtomicSwapBid: return ReviewableRequestType.createAtomicSwapBid.rawValue
      case .createPoll: return ReviewableRequestType.createPoll.rawValue
      case .kycRecovery: return ReviewableRequestType.kycRecovery.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .createAsset(let data): xdr.append(data.toXDR())
      case .updateAsset(let data): xdr.append(data.toXDR())
      case .createPreIssuance(let data): xdr.append(data.toXDR())
      case .createIssuance(let data): xdr.append(data.toXDR())
      case .createWithdraw(let data): xdr.append(data.toXDR())
      case .createSale(let data): xdr.append(data.toXDR())
      case .updateLimits(let data): xdr.append(data.toXDR())
      case .createAmlAlert(let data): xdr.append(data.toXDR())
      case .changeRole(let data): xdr.append(data.toXDR())
      case .updateSaleDetails(let data): xdr.append(data.toXDR())
      case .createInvoice(let data): xdr.append(data.toXDR())
      case .manageContract(let data): xdr.append(data.toXDR())
      case .createAtomicSwapAsk(let data): xdr.append(data.toXDR())
      case .createAtomicSwapBid(let data): xdr.append(data.toXDR())
      case .createPoll(let data): xdr.append(data.toXDR())
      case .kycRecovery(let data): xdr.append(data.toXDR())
      }

      return xdr
    }

  }
  public enum ReviewableRequestEntryExt: XDRDiscriminatedUnion {
    case emptyVersion()

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion(): xdr.append(Data())
      }

      return xdr
    }

  }
}
