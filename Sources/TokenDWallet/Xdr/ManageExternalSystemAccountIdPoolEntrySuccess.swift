// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  //: Success result of operation application
//  struct ManageExternalSystemAccountIdPoolEntrySuccess
//  {
//      //: ID of the created external system account ID pool
//      uint64 poolEntryID;
//  
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct ManageExternalSystemAccountIdPoolEntrySuccess: XDREncodable {
  public var poolEntryID: Uint64
  public var ext: ManageExternalSystemAccountIdPoolEntrySuccessExt

  public init(
      poolEntryID: Uint64,
      ext: ManageExternalSystemAccountIdPoolEntrySuccessExt) {

    self.poolEntryID = poolEntryID
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.poolEntryID.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public enum ManageExternalSystemAccountIdPoolEntrySuccessExt: XDRDiscriminatedUnion {
    case emptyVersion()

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion(): xdr.append(Data())
      }

      return xdr
    }

  }
}
