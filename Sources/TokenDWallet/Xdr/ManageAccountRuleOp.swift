// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  //: ManageAccountRuleOp is used to create, update or remove account rule
//  struct ManageAccountRuleOp
//  {
//      //: data is used to pass one of `ManageAccountRuleAction` with required params
//      union switch (ManageAccountRuleAction action)
//      {
//      case CREATE:
//          CreateAccountRuleData createData;
//      case UPDATE:
//          UpdateAccountRuleData updateData;
//      case REMOVE:
//          RemoveAccountRuleData removeData;
//      } data;
//  
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct ManageAccountRuleOp: XDREncodable {
  public var data: ManageAccountRuleOpData
  public var ext: ManageAccountRuleOpExt

  public init(
      data: ManageAccountRuleOpData,
      ext: ManageAccountRuleOpExt) {

    self.data = data
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.data.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public enum ManageAccountRuleOpData: XDRDiscriminatedUnion {
    case create(CreateAccountRuleData)
    case update(UpdateAccountRuleData)
    case remove(RemoveAccountRuleData)

    public var discriminant: Int32 {
      switch self {
      case .create: return ManageAccountRuleAction.create.rawValue
      case .update: return ManageAccountRuleAction.update.rawValue
      case .remove: return ManageAccountRuleAction.remove.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .create(let data): xdr.append(data.toXDR())
      case .update(let data): xdr.append(data.toXDR())
      case .remove(let data): xdr.append(data.toXDR())
      }

      return xdr
    }

  }
  public enum ManageAccountRuleOpExt: XDRDiscriminatedUnion {
    case emptyVersion()

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion(): xdr.append(Data())
      }

      return xdr
    }

  }
}
