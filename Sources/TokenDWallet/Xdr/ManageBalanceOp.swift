// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct ManageBalanceOp
//  {
//      //: Defines a ManageBalanceAction action to perform
//      ManageBalanceAction action;
//      //: Defines the account whose balance would be managed
//      AccountID destination;
//      //: Defines the asset of the balance to which `action` would be applied
//      AssetCode asset;
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct ManageBalanceOp: XDREncodable {
  public var action: ManageBalanceAction
  public var destination: AccountID
  public var asset: AssetCode
  public var ext: ManageBalanceOpExt

  public init(
      action: ManageBalanceAction,
      destination: AccountID,
      asset: AssetCode,
      ext: ManageBalanceOpExt) {

    self.action = action
    self.destination = destination
    self.asset = asset
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.action.toXDR())
    xdr.append(self.destination.toXDR())
    xdr.append(self.asset.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public enum ManageBalanceOpExt: XDRDiscriminatedUnion {
    case emptyVersion()

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion(): xdr.append(Data())
      }

      return xdr
    }

  }
}
