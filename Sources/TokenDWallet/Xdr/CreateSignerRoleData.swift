// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct CreateSignerRoleData
//  {
//      //: Array of ids of existing, unique and not default rules
//      uint64 ruleIDs<>;
//      //: True means that no one can manage such rule after creating
//      bool isReadOnly;
//      //: Arbitrary stringified json object with details to attach to the role
//      longstring details;
//  
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
public struct CreateSignerRoleData: XDREncodable {
  public var ruleIDs: [Uint64]
  public var isReadOnly: Bool
  public var details: Longstring
  public var ext: CreateSignerRoleDataExt

  public init(
      ruleIDs: [Uint64],
      isReadOnly: Bool,
      details: Longstring,
      ext: CreateSignerRoleDataExt) {

    self.ruleIDs = ruleIDs
    self.isReadOnly = isReadOnly
    self.details = details
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.ruleIDs.toXDR())
    xdr.append(self.isReadOnly.toXDR())
    xdr.append(self.details.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public enum CreateSignerRoleDataExt: XDRDiscriminatedUnion {
    case emptyVersion()

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion(): xdr.append(Data())
      }

      return xdr
    }

  }
}
