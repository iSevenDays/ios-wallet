// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct ContractEntry
//  {
//      uint64 contractID;
//  
//      AccountID contractor;
//      AccountID customer;
//      AccountID escrow;
//  
//      uint64 startTime;
//      uint64 endTime;
//      uint64 invoiceRequestsIDs<>;
//      longstring initialDetails;
//  
//      uint32 state;
//      longstring customerDetails;
//  
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct ContractEntry: XDREncodable {
  public var contractID: Uint64
  public var contractor: AccountID
  public var customer: AccountID
  public var escrow: AccountID
  public var startTime: Uint64
  public var endTime: Uint64
  public var invoiceRequestsIDs: [Uint64]
  public var initialDetails: Longstring
  public var state: Uint32
  public var customerDetails: Longstring
  public var ext: ContractEntryExt

  public init(
      contractID: Uint64,
      contractor: AccountID,
      customer: AccountID,
      escrow: AccountID,
      startTime: Uint64,
      endTime: Uint64,
      invoiceRequestsIDs: [Uint64],
      initialDetails: Longstring,
      state: Uint32,
      customerDetails: Longstring,
      ext: ContractEntryExt) {

    self.contractID = contractID
    self.contractor = contractor
    self.customer = customer
    self.escrow = escrow
    self.startTime = startTime
    self.endTime = endTime
    self.invoiceRequestsIDs = invoiceRequestsIDs
    self.initialDetails = initialDetails
    self.state = state
    self.customerDetails = customerDetails
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.contractID.toXDR())
    xdr.append(self.contractor.toXDR())
    xdr.append(self.customer.toXDR())
    xdr.append(self.escrow.toXDR())
    xdr.append(self.startTime.toXDR())
    xdr.append(self.endTime.toXDR())
    xdr.append(self.invoiceRequestsIDs.toXDR())
    xdr.append(self.initialDetails.toXDR())
    xdr.append(self.state.toXDR())
    xdr.append(self.customerDetails.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public enum ContractEntryExt: XDRDiscriminatedUnion {
    case emptyVersion()

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion(): xdr.append(Data())
      }

      return xdr
    }

  }
}
