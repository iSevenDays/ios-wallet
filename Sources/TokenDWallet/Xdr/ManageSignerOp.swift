// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  //: ManageSignerOp is used to create, update or remove a signer
//  struct ManageSignerOp
//  {
//      //: data is used to pass one of `ManageSignerAction` with required params
//      union switch (ManageSignerAction action)
//      {
//      case CREATE:
//          UpdateSignerData createData;
//      case UPDATE:
//          UpdateSignerData updateData;
//      case REMOVE:
//          RemoveSignerData removeData;
//      }
//      data;
//  
//      //: reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
public struct ManageSignerOp: XDREncodable {
  public var data: ManageSignerOpData
  public var ext: EmptyExt

  public init(
      data: ManageSignerOpData,
      ext: EmptyExt) {

    self.data = data
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.data.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public enum ManageSignerOpData: XDRDiscriminatedUnion {
    case create(UpdateSignerData)
    case update(UpdateSignerData)
    case remove(RemoveSignerData)

    public var discriminant: Int32 {
      switch self {
      case .create: return ManageSignerAction.create.rawValue
      case .update: return ManageSignerAction.update.rawValue
      case .remove: return ManageSignerAction.remove.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .create(let data): xdr.append(data.toXDR())
      case .update(let data): xdr.append(data.toXDR())
      case .remove(let data): xdr.append(data.toXDR())
      }

      return xdr
    }

  }
}
