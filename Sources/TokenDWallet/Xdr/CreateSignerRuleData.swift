// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct CreateSignerRuleData
//  {
//      //: Resource is used to specify entity (for some - with properties) that can be managed through operations
//      SignerRuleResource resource;
//      //: Value from enum that can be applied to `resource`
//      SignerRuleAction action;
//      //: True if such `action` on such `resource` is prohibited, otherwise allows
//      bool forbids;
//      //: True means that such rule will be automatically added to each new or updated signer role
//      bool isDefault;
//      //: True means that no one can manage such rule after creating
//      bool isReadOnly;
//      //: Arbitrary stringified json object with details that will be attached to rule
//      longstring details;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
public struct CreateSignerRuleData: XDREncodable {
  public var resource: SignerRuleResource
  public var action: SignerRuleAction
  public var forbids: Bool
  public var isDefault: Bool
  public var isReadOnly: Bool
  public var details: Longstring
  public var ext: CreateSignerRuleDataExt

  public init(
      resource: SignerRuleResource,
      action: SignerRuleAction,
      forbids: Bool,
      isDefault: Bool,
      isReadOnly: Bool,
      details: Longstring,
      ext: CreateSignerRuleDataExt) {

    self.resource = resource
    self.action = action
    self.forbids = forbids
    self.isDefault = isDefault
    self.isReadOnly = isReadOnly
    self.details = details
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.resource.toXDR())
    xdr.append(self.action.toXDR())
    xdr.append(self.forbids.toXDR())
    xdr.append(self.isDefault.toXDR())
    xdr.append(self.isReadOnly.toXDR())
    xdr.append(self.details.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public enum CreateSignerRuleDataExt: XDRDiscriminatedUnion {
    case emptyVersion()

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion(): xdr.append(Data())
      }

      return xdr
    }

  }
}
