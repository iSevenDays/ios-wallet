// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct SaleCreationRequest
//  {   
//      //: Type of the sale
//      //: 1: basic sale
//      //: 2: crowdfunding sale
//      //: 3: fixed price sale
//      uint64 saleType;
//      //: Asset code of asset to sell on sale
//      AssetCode baseAsset; // asset for which sale will be performed
//      //: Asset code of the asset used to calculcate soft cap and hard cap
//      AssetCode defaultQuoteAsset; // asset for soft and hard cap
//      //: Time when sale should start
//      uint64 startTime; // start time of the sale
//      //: Time when sale should end
//      uint64 endTime; // close time of the sale
//      //: Minimal amount in default quote asset to be acquired on sale for it to be considered successful
//      uint64 softCap; // minimum amount of quote asset to be received at which sale will be considered a successful
//      //: Maximal amount in default quote asset to be received during sale. On reaching hard cap, sale immediately closes.
//      uint64 hardCap; // max amount of quote asset to be received
//      //: Arbitrary stringified JSON object that can be used to attach data to be reviewed by the admin
//      longstring creatorDetails; // details set by requester
//      //: Parameters specific to concrete sale type
//      SaleTypeExt saleTypeExt;
//      //: 
//      uint64 requiredBaseAssetForHardCap;
//      //: Used to keep track of rejected requests update. On each rejected SaleCreationRequest update, sequenceNumber increases
//      uint32 sequenceNumber;
//      //: Array of quote assets, in which pariticapation is possible
//      SaleCreationRequestQuoteAsset quoteAssets<100>;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct SaleCreationRequest: XDREncodable {
  public var saleType: Uint64
  public var baseAsset: AssetCode
  public var defaultQuoteAsset: AssetCode
  public var startTime: Uint64
  public var endTime: Uint64
  public var softCap: Uint64
  public var hardCap: Uint64
  public var creatorDetails: Longstring
  public var saleTypeExt: SaleTypeExt
  public var requiredBaseAssetForHardCap: Uint64
  public var sequenceNumber: Uint32
  public var quoteAssets: [SaleCreationRequestQuoteAsset]
  public var ext: SaleCreationRequestExt

  public init(
      saleType: Uint64,
      baseAsset: AssetCode,
      defaultQuoteAsset: AssetCode,
      startTime: Uint64,
      endTime: Uint64,
      softCap: Uint64,
      hardCap: Uint64,
      creatorDetails: Longstring,
      saleTypeExt: SaleTypeExt,
      requiredBaseAssetForHardCap: Uint64,
      sequenceNumber: Uint32,
      quoteAssets: [SaleCreationRequestQuoteAsset],
      ext: SaleCreationRequestExt) {

    self.saleType = saleType
    self.baseAsset = baseAsset
    self.defaultQuoteAsset = defaultQuoteAsset
    self.startTime = startTime
    self.endTime = endTime
    self.softCap = softCap
    self.hardCap = hardCap
    self.creatorDetails = creatorDetails
    self.saleTypeExt = saleTypeExt
    self.requiredBaseAssetForHardCap = requiredBaseAssetForHardCap
    self.sequenceNumber = sequenceNumber
    self.quoteAssets = quoteAssets
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.saleType.toXDR())
    xdr.append(self.baseAsset.toXDR())
    xdr.append(self.defaultQuoteAsset.toXDR())
    xdr.append(self.startTime.toXDR())
    xdr.append(self.endTime.toXDR())
    xdr.append(self.softCap.toXDR())
    xdr.append(self.hardCap.toXDR())
    xdr.append(self.creatorDetails.toXDR())
    xdr.append(self.saleTypeExt.toXDR())
    xdr.append(self.requiredBaseAssetForHardCap.toXDR())
    xdr.append(self.sequenceNumber.toXDR())
    xdr.append(self.quoteAssets.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public enum SaleCreationRequestExt: XDRDiscriminatedUnion {
    case emptyVersion()

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion(): xdr.append(Data())
      }

      return xdr
    }

  }
}
